// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  username      String       @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  gamesPlayed   GamePlayed[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GamePlayed {
  id         Int      @id @default(autoincrement())
  played_at  DateTime
  updated_at DateTime @default(now())
  notes      String
  beaten_in  Int? // Secconds

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  game   Game    @relation(fields: [gameId], references: [id])
  gameId Int
}

model Game {
  id          Int    @id @default(autoincrement())
  igdb_id     String @unique
  name        String @unique
  description String

  media      Media[]
  GamePlayed GamePlayed[]
}

model Media {
  id       Int    @id @default(autoincrement())
  image_id String @unique

  Game   Game? @relation(fields: [gameId], references: [id])
  gameId Int?
}
